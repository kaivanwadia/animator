// generated by Fast Light User Interface Designer (fluid) version 1.00

#include "animatoruiwindows.h"
#include <iostream>

Fl_Menu_Item ModelerUIWindows::menu_m_pmbMenuBar[] = {
 {"&File", 0,  0, 0, 64, 0, 0, 14, 0},
 {"&Open Animation Script...", 0,  0, 0, 0, 0, 0, 14, 0},
 {"&Save Animation Script As...", 0,  0, 0, 128, 0, 0, 14, 0},
 {"S&ave Current Frame As...", 0,  0, 0, 128, 0, 0, 14, 0},
 {"Sa&ve Movie As...", 0,  0, 0, 128, 0, 0, 14, 0},
 {"E&xit", 0,  0, 0, 0, 0, 0, 14, 0},
 {0},
 {"&View", 0,  0, 0, 64, 0, 0, 14, 0},
 {"&Normal", 0,  0, 0, 12, 0, 0, 14, 0},
 {"&Flat Shaded", 0,  0, 0, 8, 0, 0, 14, 0},
 {"&Wireframe", 0,  0, 0, 136, 0, 0, 14, 0},
 {"&High Quality", 0,  0, 0, 8, 0, 0, 14, 0},
 {"&Medium Quality", 0,  0, 0, 12, 0, 0, 14, 0},
 {"&Low Quality", 0,  0, 0, 8, 0, 0, 14, 0},
 {"&Poor Quality", 0,  0, 0, 8, 0, 0, 14, 0},
 {0},
 {"&Animation", 0,  0, 0, 64, 0, 0, 14, 0},
 {"&Set Animation Length", 0,  0, 0, 0, 0, 0, 14, 0},
 {0},
 {0}
};
Fl_Menu_Item* ModelerUIWindows::m_pmiOpenAniScript = ModelerUIWindows::menu_m_pmbMenuBar + 1;
Fl_Menu_Item* ModelerUIWindows::m_pmiSaveAniScript = ModelerUIWindows::menu_m_pmbMenuBar + 2;
Fl_Menu_Item* ModelerUIWindows::m_pmiSaveBitmapFile = ModelerUIWindows::menu_m_pmbMenuBar + 3;
Fl_Menu_Item* ModelerUIWindows::m_pmiSaveMovie = ModelerUIWindows::menu_m_pmbMenuBar + 4;
Fl_Menu_Item* ModelerUIWindows::m_pmiExit = ModelerUIWindows::menu_m_pmbMenuBar + 5;
Fl_Menu_Item* ModelerUIWindows::m_pmiNormal = ModelerUIWindows::menu_m_pmbMenuBar + 8;
Fl_Menu_Item* ModelerUIWindows::m_pmiFlatShaded = ModelerUIWindows::menu_m_pmbMenuBar + 9;
Fl_Menu_Item* ModelerUIWindows::m_pmiWireFrame = ModelerUIWindows::menu_m_pmbMenuBar + 10;
Fl_Menu_Item* ModelerUIWindows::m_pmiHightQuality = ModelerUIWindows::menu_m_pmbMenuBar + 11;
Fl_Menu_Item* ModelerUIWindows::m_pmiMediumQuality = ModelerUIWindows::menu_m_pmbMenuBar + 12;
Fl_Menu_Item* ModelerUIWindows::m_pmiLowQuality = ModelerUIWindows::menu_m_pmbMenuBar + 13;
Fl_Menu_Item* ModelerUIWindows::m_pmiPoorQuality = ModelerUIWindows::menu_m_pmbMenuBar + 14;
Fl_Menu_Item* ModelerUIWindows::m_pmiSetAniLen = ModelerUIWindows::menu_m_pmbMenuBar + 17;

Fl_Menu_Item ModelerUIWindows::menu_m_pchoCurveType[] = {
 {"Linear", 0,  0, 0, 0, 0, 0, 12, 0},
 {"Cubic B-Spline", 0,  0, 0, 0, 0, 0, 12, 0},
 {"Bezier", 0,  0, 0, 0, 0, 0, 12, 0},
 {"Catmull-Rom", 0,  0, 0, 0, 0, 0, 12, 0},
 {"C2-Interpolating", 0,  0, 0, 0, 0, 0, 12, 0},
 {"Cardinal", 0,  0, 0, 0, 0, 0, 12, 0},
 {"De Casteljau", 0,  0, 0, 0, 0, 0, 12, 0},
 {"Quad B-Spline", 0,  0, 0, 0, 0, 0, 12, 0},
 {"Lane Riesen", 0,  0, 0, 0, 0, 0, 12, 0},
 {0}
};

Fl_Menu_Item ModelerUIWindows::menu_m_bezierCurveType[] = {
 {"C0 Continuity", 0,  0, 0, 0, 0, 0, 12, 0},
 {"C1 Continuity", 0,  0, 0, 0, 0, 0, 12, 0},
 {0}
};

double ModelerUIWindows::m_nTAU;
double ModelerUIWindows::m_nSteps;

double ModelerUIWindows::m_nGravity;
double ModelerUIWindows::m_nDragCoeff;
double ModelerUIWindows::m_nFlDrag;
double ModelerUIWindows::m_nFlStiff;
double ModelerUIWindows::m_nPenaltyStiffness;

double ModelerUIWindows::m_nRed;
double ModelerUIWindows::m_nGreen;
double ModelerUIWindows::m_nBlue;
int ModelerUIWindows::m_nPartPerFrame;
int ModelerUIWindows::m_nLifespan;
int ModelerUIWindows::m_nMaxParticles;
bool ModelerUIWindows::m_bCollisions;

bool ModelerUIWindows::m_bt1TurEmit;
bool ModelerUIWindows::m_bt1GunEmit;

bool ModelerUIWindows::m_bt2TurEmit;
bool ModelerUIWindows::m_bt2GunEmit;

double ModelerUIWindows::m_nMaxTank1Vel;
double ModelerUIWindows::m_nMaxTank2Vel;

bool ModelerUIWindows::m_bSprings;
double ModelerUIWindows::m_nSpringStiffness;
double ModelerUIWindows::m_nSpringRestLen;

void ModelerUIWindows::cb_bezierCurveType(Fl_Widget* o, void* v)
{
  // TODO
  int choice = ((Fl_Choice*)o)->value();
  if (choice == 0)
  {
    ((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->currCurveType(CURVE_TYPE_BEZIER);// Normal bezier C0 Continuity
    ((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->redraw();
  }
  else if (choice == 1)
  {
    ((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->currCurveType(CURVE_TYPE_C1BEZ); // C1 Continuity Bezier
    ((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->redraw();
  }
}

void ModelerUIWindows::cb_tauSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nTAU = ((Fl_Slider*)o)->value();
  if(((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->currCurveType()==CURVE_TYPE_CARDINAL)
  {
    ((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->currCurveType(CURVE_TYPE_CARDINAL);
    ((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->redraw();
  }
}

void ModelerUIWindows::cb_stepSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nSteps = ((Fl_Slider*)o)->value();
  if(((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->currCurveType()==CURVE_TYPE_DCJAU)
  {
    ((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->currCurveType(CURVE_TYPE_DCJAU);
    ((ModelerUIWindows*)(o->user_data()))->m_pwndGraphWidget->redraw();
  }
}

void ModelerUIWindows::cb_gravitySlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nGravity = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_dragSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nDragCoeff = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_flDragSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nFlDrag = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_flStiffSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nFlStiff = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_penStiffSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nPenaltyStiffness = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_redSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nRed = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_greenSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nGreen = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_blueSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nBlue = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_ppfSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nPartPerFrame = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_lifeSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nLifespan = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_maxPartSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nMaxParticles = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_t1TurretEmitBtn(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_bt1TurEmit = ((Fl_Light_Button*)o)->value() == 0 ? false : true;
}

void ModelerUIWindows::cb_t1GunEmitBtn(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_bt1GunEmit = ((Fl_Light_Button*)o)->value() == 0 ? false : true;
}

void ModelerUIWindows::cb_t2TurretEmitBtn(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_bt2TurEmit = ((Fl_Light_Button*)o)->value() == 0 ? false : true;
}

void ModelerUIWindows::cb_t2GunEmitBtn(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_bt2GunEmit = ((Fl_Light_Button*)o)->value() == 0 ? false : true;
}

void ModelerUIWindows::cb_collisionBtn(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_bCollisions = ((Fl_Light_Button*)o)->value() == 0 ? false : true;
}

void ModelerUIWindows::cb_tank1VelSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nMaxTank1Vel = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_tank2VelSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nMaxTank2Vel = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_springBtn(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_bSprings = ((Fl_Light_Button*)o)->value() == 0 ? false : true;
}

void ModelerUIWindows::cb_springStiffSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nSpringStiffness = ((Fl_Slider*)o)->value();
}

void ModelerUIWindows::cb_springRestLenSlider(Fl_Widget* o, void* v)
{
  ((ModelerUIWindows*)(o->user_data()))->m_nSpringRestLen = ((Fl_Slider*)o)->value();
}

ModelerUIWindows::ModelerUIWindows() {
  Fl_Window* w;
  { Fl_Window* o = m_pwndMainWnd = new Fl_Window(700, 1000, "CS384g Animator Fall 2005");
    w = o;
    o->color(185);
    o->labeltype(FL_NORMAL_LABEL);
    o->user_data((void*)(this));
    o->when(FL_WHEN_NEVER);
    { Fl_Menu_Bar* o = m_pmbMenuBar = new Fl_Menu_Bar(0, 0, 590, 25);
      o->selection_color(137);
      o->labelsize(12);
      o->textsize(12);
      o->menu(menu_m_pmbMenuBar);
    }
    { Fl_Browser* o = m_pbrsBrowser = new Fl_Browser(5, 55, 145, 440);
      o->type(3);
      o->selection_color(29);
      o->labeltype(FL_NO_LABEL);
      o->textsize(10);
      o->user_data((void*)(this));
    }
    { Fl_Tabs* o = m_ptabTab = new Fl_Tabs(155, 30, 430, 510);
      o->color(185);
      o->user_data((void*)(this));
      o->align(FL_ALIGN_CENTER);
      { Fl_Scroll* o = m_pscrlScroll = new Fl_Scroll(155, 50, 430, 490, "Modeler");
        o->type(6);
        o->labelsize(12);
        o->when(FL_WHEN_CHANGED);
        o->hide();
        { Fl_Pack* o = m_ppckPack = new Fl_Pack(155, 50, 290, 490);
          o->end();
          Fl_Group::current()->resizable(o);
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      { Fl_Group* o = m_pgrpCurveGroup = new Fl_Group(160, 55, 425, 435, "Curves");//435
        o->labelsize(12);
        { Fl_Group* o = new Fl_Group(160, 55, 420, 410);
          { Fl_Box* o = new Fl_Box(160, 55, 40, 20, "Useless Box");
            o->box(FL_ENGRAVED_BOX);
            o->labeltype(FL_NO_LABEL);
          }
          { RulerWindow* o = m_pwndHRuler = new RulerWindow(205, 55, 375, 20);
            o->box(FL_ENGRAVED_BOX);
            o->end();
          }
          { RulerWindow* o = m_pwndVRuler = new RulerWindow(160, 80, 40, 385);
            o->box(FL_ENGRAVED_BOX);
            m_pwndVRuler->type(RW_VERTICAL);
            o->end();
          }
          { GraphWidget* o = m_pwndGraphWidget = new GraphWidget(205, 80, 375, 385);
            o->box(FL_ENGRAVED_BOX);
            o->user_data((void*)(this));
            o->end();
            Fl_Group::current()->resizable(o);
          }
          o->end();
          Fl_Group::current()->resizable(o);
        }
        { Fl_Group* o = new Fl_Group(160, 470, 420, 20);
          { Fl_Box* o = new Fl_Box(160, 470, 75, 20, "Curve Type:");
            o->labelsize(12);
            o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          }
          { Fl_Choice* o = m_pchoCurveType = new Fl_Choice(230, 470, 115, 20);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->textsize(12);
            o->user_data((void*)(this));
            o->menu(menu_m_pchoCurveType);
          }
          { Fl_Light_Button* o = m_pbtWrap = new Fl_Light_Button(345, 470, 70, 20, "Wrap");
            o->labelsize(12);
            o->user_data((void*)(this));
          }
          { Fl_Button* o = m_pbtZoomAll = new Fl_Button(505, 470, 75, 20, "Z&oom All");
            o->labelsize(12);
            o->user_data((void*)(this));
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }

    {
      m_bezCurveTypeChoice = new Fl_Choice(230, 500, 115, 20, "Bez-Type");
      m_bezCurveTypeChoice->labelsize(12);
      m_bezCurveTypeChoice->textsize(12);
      m_bezCurveTypeChoice->user_data((void*)(this));
      m_bezCurveTypeChoice->menu(menu_m_bezierCurveType);
      m_bezCurveTypeChoice->callback(cb_bezierCurveType);
      m_bezCurveTypeChoice->deactivate();
    }

    { 
      m_nTAU = 0.1;
      m_tauSlider = new Fl_Value_Slider(400,490,100,20,"Tau");
      m_tauSlider->user_data((void*)this);
      m_tauSlider->type(FL_HOR_NICE_SLIDER);
      m_tauSlider->labelfont(FL_COURIER);
      m_tauSlider->labelsize(12);
      m_tauSlider->minimum(0.1);
      m_tauSlider->maximum(1);
      m_tauSlider->step(0.1);
      m_tauSlider->value(m_nTAU);
      m_tauSlider->align(FL_ALIGN_RIGHT);
      m_tauSlider->callback(cb_tauSlider);
    }

    { 
      m_nSteps = 1;
      m_stepSlider = new Fl_Value_Slider(400,515,100,20,"DCJ Step");
      m_stepSlider->user_data((void*)this);
      m_stepSlider->type(FL_HOR_NICE_SLIDER);
      m_stepSlider->labelfont(FL_COURIER);
      m_stepSlider->labelsize(12);
      m_stepSlider->minimum(1);
      m_stepSlider->maximum(25);
      m_stepSlider->step(1);
      m_stepSlider->value(m_nSteps);
      m_stepSlider->align(FL_ALIGN_RIGHT);
      m_stepSlider->callback(cb_stepSlider);
    }
    { Fl_Group* o = new Fl_Group(155, 550, 530, 235, "Particle System Values");//5, 510, 580, 190,
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_NO_LABEL);
      { Fl_Box* o = new Fl_Box(165, 555, 235, 20, "Particle System Values");
        o->labelsize(12);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { 
        m_nGravity = 9.8;
        m_gravitySlider = new Fl_Value_Slider(165,575,100,20,"Gravity");
        m_gravitySlider->user_data((void*)this);
        m_gravitySlider->type(FL_HOR_NICE_SLIDER);
        m_gravitySlider->labelfont(FL_COURIER);
        m_gravitySlider->labelsize(12);
        m_gravitySlider->minimum(0.0);
        m_gravitySlider->maximum(20.0);
        m_gravitySlider->step(0.1);
        m_gravitySlider->value(m_nGravity);
        m_gravitySlider->align(FL_ALIGN_RIGHT);
        m_gravitySlider->callback(cb_gravitySlider);
      }
      { 
        m_nDragCoeff = 0.48;
        m_dragSlider = new Fl_Value_Slider(165,600,100,20,"Drag");
        m_dragSlider->user_data((void*)this);
        m_dragSlider->type(FL_HOR_NICE_SLIDER);
        m_dragSlider->labelfont(FL_COURIER);
        m_dragSlider->labelsize(12);
        m_dragSlider->minimum(0.0);
        m_dragSlider->maximum(10.0);
        m_dragSlider->step(0.2);
        m_dragSlider->value(m_nDragCoeff);
        m_dragSlider->align(FL_ALIGN_RIGHT);
        m_dragSlider->callback(cb_dragSlider);
      }
      { 
        m_nFlStiff = 9000;
        m_flStiffSlider = new Fl_Value_Slider(165,625,100,20,"FloorSt");
        m_flStiffSlider->user_data((void*)this);
        m_flStiffSlider->type(FL_HOR_NICE_SLIDER);
        m_flStiffSlider->labelfont(FL_COURIER);
        m_flStiffSlider->labelsize(12);
        m_flStiffSlider->minimum(0);
        m_flStiffSlider->maximum(20000);
        m_flStiffSlider->step(500);
        m_flStiffSlider->value(m_nFlStiff);
        m_flStiffSlider->align(FL_ALIGN_RIGHT);
        m_flStiffSlider->callback(cb_flStiffSlider);
      }
      {
        m_bCollisions = 0;
        m_collisionBtn = new Fl_Light_Button(165,655,100,20," Collisions");
        m_collisionBtn->labelfont(FL_COURIER);
        m_collisionBtn->labelsize(12);
        m_collisionBtn->user_data((void*)this);
        m_collisionBtn->value(m_bCollisions);
        m_collisionBtn->callback(cb_collisionBtn);
      }
      { 
        m_nPenaltyStiffness = 2500;
        m_penaltyStiffSlider = new Fl_Value_Slider(280,655,100,20,"PenaltyStiffness");
        m_penaltyStiffSlider->user_data((void*)this);
        m_penaltyStiffSlider->type(FL_HOR_NICE_SLIDER);
        m_penaltyStiffSlider->labelfont(FL_COURIER);
        m_penaltyStiffSlider->labelsize(12);
        m_penaltyStiffSlider->minimum(1000);
        m_penaltyStiffSlider->maximum(6000);
        m_penaltyStiffSlider->step(50);
        m_penaltyStiffSlider->value(m_nPenaltyStiffness);
        m_penaltyStiffSlider->align(FL_ALIGN_RIGHT);
        m_penaltyStiffSlider->callback(cb_penStiffSlider);
      }
      {
        m_nPartPerFrame = 2;
        m_ppfSlider = new Fl_Value_Slider(330,575,80,20,"Max PtPerFr");
        m_ppfSlider->user_data((void*)this);
        m_ppfSlider->type(FL_HOR_NICE_SLIDER);
        m_ppfSlider->labelfont(FL_COURIER);
        m_ppfSlider->labelsize(12);
        m_ppfSlider->minimum(1);
        m_ppfSlider->maximum(10);
        m_ppfSlider->step(1);
        m_ppfSlider->value(m_nPartPerFrame);
        m_ppfSlider->align(FL_ALIGN_RIGHT);
        m_ppfSlider->callback(cb_ppfSlider);
      }
      { 
        m_nLifespan = 200;
        m_lifeSlider = new Fl_Value_Slider(330,600,80,20,"Max life");
        m_lifeSlider->user_data((void*)this);
        m_lifeSlider->type(FL_HOR_NICE_SLIDER);
        m_lifeSlider->labelfont(FL_COURIER);
        m_lifeSlider->labelsize(12);
        m_lifeSlider->minimum(50);
        m_lifeSlider->maximum(1000);
        m_lifeSlider->step(1);
        m_lifeSlider->value(m_nLifespan);
        m_lifeSlider->align(FL_ALIGN_RIGHT);
        m_lifeSlider->callback(cb_lifeSlider);
      }
      { 
        m_nMaxParticles = 50;
        m_maxPartSlider = new Fl_Value_Slider(330,625,80,20,"Max Particles");
        m_maxPartSlider->user_data((void*)this);
        m_maxPartSlider->type(FL_HOR_NICE_SLIDER);
        m_maxPartSlider->labelfont(FL_COURIER);
        m_maxPartSlider->labelsize(12);
        m_maxPartSlider->minimum(10);
        m_maxPartSlider->maximum(250);
        m_maxPartSlider->step(1);
        m_maxPartSlider->value(m_nMaxParticles);
        m_maxPartSlider->align(FL_ALIGN_RIGHT);
        m_maxPartSlider->callback(cb_maxPartSlider);
      }
      { 
        m_nRed = 0.0;
        m_redSlider = new Fl_Value_Slider(560,575,80,20,"Red");
        m_redSlider->user_data((void*)this);
        m_redSlider->type(FL_HOR_NICE_SLIDER);
        m_redSlider->labelfont(FL_COURIER);
        m_redSlider->labelsize(12);
        m_redSlider->minimum(0);
        m_redSlider->maximum(1.0);
        m_redSlider->step(0.1);
        m_redSlider->value(m_nRed);
        m_redSlider->align(FL_ALIGN_RIGHT);
        m_redSlider->callback(cb_redSlider);
      }
      { 
        m_nGreen = 0.8;
        m_greenSlider = new Fl_Value_Slider(560,600,80,20,"Green");
        m_greenSlider->user_data((void*)this);
        m_greenSlider->type(FL_HOR_NICE_SLIDER);
        m_greenSlider->labelfont(FL_COURIER);
        m_greenSlider->labelsize(12);
        m_greenSlider->minimum(0);
        m_greenSlider->maximum(1.0);
        m_greenSlider->step(0.1);
        m_greenSlider->value(m_nGreen);
        m_greenSlider->align(FL_ALIGN_RIGHT);
        m_greenSlider->callback(cb_greenSlider);
      }
      { 
        m_nBlue = 0.2;
        m_blueSlider = new Fl_Value_Slider(560,625,80,20,"Blue");
        m_blueSlider->user_data((void*)this);
        m_blueSlider->type(FL_HOR_NICE_SLIDER);
        m_blueSlider->labelfont(FL_COURIER);
        m_blueSlider->labelsize(12);
        m_blueSlider->minimum(0);
        m_blueSlider->maximum(1.0);
        m_blueSlider->step(0.1);
        m_blueSlider->value(m_nBlue);
        m_blueSlider->align(FL_ALIGN_RIGHT);
        m_blueSlider->callback(cb_blueSlider);
      }
      { 
        m_bt1TurEmit = 1;
        m_t1TurretEmitBtn = new Fl_Light_Button(560,655,100,20," Tank1Cannon");
        m_t1TurretEmitBtn->labelfont(FL_COURIER);
        m_t1TurretEmitBtn->labelsize(12);
        m_t1TurretEmitBtn->user_data((void*)this);
        m_t1TurretEmitBtn->value(m_bt1TurEmit);
        m_t1TurretEmitBtn->callback(cb_t1TurretEmitBtn);
      }
      { 
        m_bt1GunEmit = 0;
        m_t1GunEmitBtn = new Fl_Light_Button(560,680,100,20," Tank1Gun");
        m_t1GunEmitBtn->labelfont(FL_COURIER);
        m_t1GunEmitBtn->labelsize(12);
        m_t1GunEmitBtn->user_data((void*)this);
        m_t1GunEmitBtn->value(m_bt1GunEmit);
        m_t1GunEmitBtn->callback(cb_t1GunEmitBtn);
      }
      { 
        m_bt2TurEmit = 1;
        m_t2TurretEmitBtn = new Fl_Light_Button(560,705,100,20," Tank2Cannon");
        m_t2TurretEmitBtn->labelfont(FL_COURIER);
        m_t2TurretEmitBtn->labelsize(12);
        m_t2TurretEmitBtn->user_data((void*)this);
        m_t2TurretEmitBtn->value(m_bt2TurEmit);
        m_t2TurretEmitBtn->callback(cb_t2TurretEmitBtn);
      }
      { 
        m_bt2GunEmit = 0;
        m_t2GunEmitBtn = new Fl_Light_Button(560,730,100,20," Tank2Gun");
        m_t2GunEmitBtn->labelfont(FL_COURIER);
        m_t2GunEmitBtn->labelsize(12);
        m_t2GunEmitBtn->user_data((void*)this);
        m_t2GunEmitBtn->value(m_bt2GunEmit);
        m_t2GunEmitBtn->callback(cb_t2GunEmitBtn);
      }
      { 
        m_nMaxTank1Vel = 4;
        m_tank1VelSlider = new Fl_Value_Slider(165,680,100,20,"Max Tank1 Vel");
        m_tank1VelSlider->user_data((void*)this);
        m_tank1VelSlider->type(FL_HOR_NICE_SLIDER);
        m_tank1VelSlider->labelfont(FL_COURIER);
        m_tank1VelSlider->labelsize(12);
        m_tank1VelSlider->minimum(1);
        m_tank1VelSlider->maximum(10);
        m_tank1VelSlider->step(1);
        m_tank1VelSlider->value(m_nMaxTank1Vel);
        m_tank1VelSlider->align(FL_ALIGN_RIGHT);
        m_tank1VelSlider->callback(cb_tank1VelSlider);
      }
      { 
        m_nMaxTank2Vel = 4;
        m_tank2VelSlider = new Fl_Value_Slider(360,680,100,20,"Max Tank2 Vel");
        m_tank2VelSlider->user_data((void*)this);
        m_tank2VelSlider->type(FL_HOR_NICE_SLIDER);
        m_tank2VelSlider->labelfont(FL_COURIER);
        m_tank2VelSlider->labelsize(12);
        m_tank2VelSlider->minimum(1);
        m_tank2VelSlider->maximum(10);
        m_tank2VelSlider->step(1);
        m_tank2VelSlider->value(m_nMaxTank2Vel);
        m_tank2VelSlider->align(FL_ALIGN_RIGHT);
        m_tank2VelSlider->callback(cb_tank2VelSlider);
      }

      {
        m_bSprings = 0;
        m_springBtn = new Fl_Light_Button(165,705,100,20," Springs");
        m_springBtn->labelfont(FL_COURIER);
        m_springBtn->labelsize(12);
        m_springBtn->user_data((void*)this);
        m_springBtn->value(m_bSprings);
        m_springBtn->callback(cb_springBtn);
      }
      { 
        m_nSpringStiffness = 100;
        m_springStiffSlider = new Fl_Value_Slider(165,730,100,20,"Spring Stiffness");
        m_springStiffSlider->user_data((void*)this);
        m_springStiffSlider->type(FL_HOR_NICE_SLIDER);
        m_springStiffSlider->labelfont(FL_COURIER);
        m_springStiffSlider->labelsize(12);
        m_springStiffSlider->minimum(1);
        m_springStiffSlider->maximum(200);
        m_springStiffSlider->step(1);
        m_springStiffSlider->value(m_nSpringStiffness);
        m_springStiffSlider->align(FL_ALIGN_RIGHT);
        m_springStiffSlider->callback(cb_springStiffSlider);
      }
      { 
        m_nSpringRestLen = 1;
        m_springRestLenSlider = new Fl_Value_Slider(165,755,100,20,"Spring Rest Length");
        m_springRestLenSlider->user_data((void*)this);
        m_springRestLenSlider->type(FL_HOR_NICE_SLIDER);
        m_springRestLenSlider->labelfont(FL_COURIER);
        m_springRestLenSlider->labelsize(12);
        m_springRestLenSlider->minimum(0.1);
        m_springRestLenSlider->maximum(4);
        m_springRestLenSlider->step(0.1);
        m_springRestLenSlider->value(m_nSpringRestLen);
        m_springRestLenSlider->align(FL_ALIGN_RIGHT);
        m_springRestLenSlider->callback(cb_springRestLenSlider);
      }
      o->end();
    }

    { Fl_Group* o = new Fl_Group(5, 750, 580, 190, "Animation Controls");//5, 510, 580, 190,
      o->labeltype(FL_NO_LABEL);
      { Fl_Group* o = new Fl_Group(95, 790, 490, 150, "Playback");
        o->labeltype(FL_NO_LABEL);
        { Fl_Group* o = new Fl_Group(155, 790, 430, 55, "Playback Controls");
          o->box(FL_ENGRAVED_BOX);
          o->labeltype(FL_NO_LABEL);
          { Fl_Button* o = m_pbtStepBack = new Fl_Button(165, 820, 20, 20, "@|<");
            o->shortcut(0x7a);
            o->labeltype(FL_SYMBOL_LABEL);
            o->user_data((void*)(this));
          }
          { Fl_Button* o = m_pbtPlay = new Fl_Button(185, 820, 40, 20, "@>");
            o->shortcut(0x78);
            o->labeltype(FL_SYMBOL_LABEL);
            o->user_data((void*)(this));
          }
          { Fl_Button* o = m_pbtStepForw = new Fl_Button(225, 820, 20, 20, "@>|");
            o->shortcut(0x63);
            o->labeltype(FL_SYMBOL_LABEL);
            o->user_data((void*)(this));
          }
          { Fl_Light_Button* o = m_pbtLoop = new Fl_Light_Button(250, 820, 50, 20, "&Loop");
            o->labelsize(12);
            o->user_data((void*)(this));
          }
          { Fl_Light_Button* o = m_pbtSimulate = new Fl_Light_Button(335, 820, 70, 20, "&Simulate");
            o->labelsize(12);
            o->user_data((void*)(this));
          }
          { Fl_Value_Slider* o = m_psldrFPS = new Fl_Value_Slider(470, 820, 100, 20, "FPS");
            o->type(5);
            o->labelsize(12);
            o->minimum(5);
            o->maximum(30);
            o->step(1);
            o->value(30);
            o->user_data((void*)(this));
            o->align(FL_ALIGN_LEFT);
            Fl_Group::current()->resizable(o);
          }
          { Fl_Box* o = new Fl_Box(165, 795, 135, 20, "Playback Controls");
            o->labelsize(12);
            o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          }
          o->end();
        }
        { IndicatorWindow* o = m_pwndIndicatorWnd = new IndicatorWindow(190, 850, 375, 20);
          o->box(FL_ENGRAVED_BOX);
          o->user_data((void*)(this));
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->end();
          Fl_Group::current()->resizable(o);
        }
        { Fl_Slider* o = m_psldrTimeSlider = new Fl_Slider(185, 875, 390, 20);
          o->type(5);
          o->user_data((void*)(this));
        }
        { Fl_Slider* o = m_psldrPlayStart = new Fl_Slider(185, 895, 390, 20);
          o->type(5);
          o->color(10);
          o->user_data((void*)(this));
        }
        { Fl_Slider* o = m_psldrPlayEnd = new Fl_Slider(185, 915, 390, 20);
          o->type(5);
          o->color(80);
          o->user_data((void*)(this));
        }
        { Fl_Box* o = new Fl_Box(95, 875, 90, 20, "Time:");
          o->labelsize(12);
          o->labelcolor(7);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Box* o = new Fl_Box(95, 895, 90, 20, "Start:");
          o->labelsize(12);
          o->labelcolor(7);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Box* o = new Fl_Box(95, 915, 90, 20, "End:");
          o->labelsize(12);
          o->labelcolor(7);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Output* o = m_poutTime = new Fl_Output(130, 875, 55, 20, "Time:");
          o->labeltype(FL_NO_LABEL);
          o->labelsize(12);
          o->textsize(12);
        }
        { Fl_Output* o = m_poutPlayStart = new Fl_Output(130, 895, 55, 20, "Time:");
          o->labeltype(FL_NO_LABEL);
          o->labelsize(12);
          o->textsize(12);
        }
        { Fl_Output* o = m_poutPlayEnd = new Fl_Output(130, 915, 55, 20, "Time:");
          o->labeltype(FL_NO_LABEL);
          o->labelsize(12);
          o->textsize(12);
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      { Fl_Group* o = new Fl_Group(15, 750, 125, 95, "partical system");
        o->box(FL_ENGRAVED_BOX);
        o->labeltype(FL_NO_LABEL);
       { Fl_Box* o = new Fl_Box(20, 750, 90, 20, "Particle System");
          o->labelsize(12);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        { Fl_Button* o = m_pbtClearSim = new Fl_Button(60, 775, 70, 20, "C&lear Sim.");
          o->labelsize(12);
          o->user_data((void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(10, 860, 80, 80, "Camera");
        o->box(FL_ENGRAVED_BOX);
        o->labeltype(FL_NO_LABEL);
        { Fl_Box* o = new Fl_Box(15, 860, 70, 15, "Camera");
          o->labelsize(12);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        { Fl_Button* o = m_pbtSetCamKeyFrame = new Fl_Button(15, 875, 70, 20, "&Set");
          o->labelsize(12);
          o->user_data((void*)(this));
        }
        { Fl_Button* o = m_pbtRemoveCamKeyFrame = new Fl_Button(15, 895, 70, 20, "&Remove");
          o->labelsize(12);
          o->user_data((void*)(this));
          o->deactivate();
        }
        { Fl_Button* o = m_pbtRemoveAllCamKeyFrames = new Fl_Button(15, 915, 70, 20, "R&emove All");
          o->labelsize(12);
          o->user_data((void*)(this));
        }
        o->end();
      }
      o->end();
    }
    { Fl_Box* o = new Fl_Box(5, 30, 145, 25, "Model Controls");
      o->color(7);
      o->labelfont(1);
      o->labelsize(18);
      o->labelcolor(7);
    }
    o->end();
  }
  { Fl_Window* o = m_pwndModelerWnd = new Fl_Window(340, 296, "Model");
    w = o;
    o->user_data((void*)(this));
    o->when(FL_WHEN_NEVER);
    { ModelerView* o = m_pwndModelerView = new ModelerView(0, 0, 340, 295, (char *)"ModelerView");
      Fl_Group::current()->resizable(o);
    }
    o->end();
  }
}
