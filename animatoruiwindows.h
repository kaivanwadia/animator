// generated by Fast Light User Interface Designer (fluid) version 1.00

#ifndef animatoruiwindows_h
#define animatoruiwindows_h
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include "rulerwindow.h"
#include "graphwidget.h"
#include <FL/Fl_Choice.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Value_Slider.H>
#include "indicatorwindow.h"
#include <FL/Fl_Slider.H>
#include <FL/Fl_Output.H>
#include "modelerview.h"

class ModelerUIWindows {
public:
  ModelerUIWindows();
  Fl_Window *m_pwndMainWnd;
  Fl_Menu_Bar *m_pmbMenuBar;
  static Fl_Menu_Item menu_m_pmbMenuBar[];
  static Fl_Menu_Item *m_pmiOpenAniScript;
  static Fl_Menu_Item *m_pmiSaveAniScript;
  static Fl_Menu_Item *m_pmiSaveBitmapFile;
  static Fl_Menu_Item *m_pmiSaveMovie;
  static Fl_Menu_Item *m_pmiExit;
  static Fl_Menu_Item *m_pmiNormal;
  static Fl_Menu_Item *m_pmiFlatShaded;
  static Fl_Menu_Item *m_pmiWireFrame;
  static Fl_Menu_Item *m_pmiHightQuality;
  static Fl_Menu_Item *m_pmiMediumQuality;
  static Fl_Menu_Item *m_pmiLowQuality;
  static Fl_Menu_Item *m_pmiPoorQuality;
  static Fl_Menu_Item *m_pmiSetAniLen;
  Fl_Browser *m_pbrsBrowser;
  Fl_Tabs *m_ptabTab;
  Fl_Scroll *m_pscrlScroll;
  Fl_Pack *m_ppckPack;
  Fl_Group *m_pgrpCurveGroup;
  RulerWindow *m_pwndHRuler;
  RulerWindow *m_pwndVRuler;
  GraphWidget *m_pwndGraphWidget;
  Fl_Choice *m_pchoCurveType;
  static Fl_Menu_Item menu_m_pchoCurveType[];
  Fl_Light_Button *m_pbtWrap;
  Fl_Button *m_pbtZoomAll;
  Fl_Button *m_pbtStepBack;
  Fl_Button *m_pbtPlay;
  Fl_Button *m_pbtStepForw;
  Fl_Light_Button *m_pbtLoop;
  Fl_Light_Button *m_pbtSimulate;
  Fl_Value_Slider *m_psldrFPS;
  IndicatorWindow *m_pwndIndicatorWnd;
  Fl_Slider *m_psldrTimeSlider;
  Fl_Slider *m_psldrPlayStart;
  Fl_Slider *m_psldrPlayEnd;
  Fl_Output *m_poutTime;
  Fl_Output *m_poutPlayStart;
  Fl_Output *m_poutPlayEnd;
  Fl_Button *m_pbtClearSim;
  Fl_Button *m_pbtSetCamKeyFrame;
  Fl_Button *m_pbtRemoveCamKeyFrame;
  Fl_Button *m_pbtRemoveAllCamKeyFrames;
  Fl_Window *m_pwndModelerWnd;
  ModelerView *m_pwndModelerView;

  Fl_Choice* m_bezCurveTypeChoice;
  static Fl_Menu_Item menu_m_bezierCurveType[];
  static double m_nBezierCurveType;
  static void cb_bezierCurveType(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_tauSlider;
  static double m_nTAU;
  static void cb_tauSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_stepSlider;
  static double m_nSteps;
  static void cb_stepSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_gravitySlider;
  static double m_nGravity;
  static void cb_gravitySlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_dragSlider;
  static double m_nDragCoeff;
  static void cb_dragSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_flDragSlider;
  static double m_nFlDrag;
  static void cb_flDragSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_flStiffSlider;
  static double m_nFlStiff;
  static void cb_flStiffSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_redSlider;
  static double m_nRed;
  static void cb_redSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_greenSlider;
  static double m_nGreen;
  static void cb_greenSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_blueSlider;
  static double m_nBlue;
  static void cb_blueSlider(Fl_Widget* o, void* v);

  Fl_Light_Button *m_t1TurretEmitBtn;
  static bool m_bt1TurEmit;
  static void cb_t1TurretEmitBtn(Fl_Widget* o, void* v);

  Fl_Light_Button *m_t1GunEmitBtn;
  static bool m_bt1GunEmit;
  static void cb_t1GunEmitBtn(Fl_Widget* o, void* v);

  Fl_Light_Button *m_t2TurretEmitBtn;
  static bool m_bt2TurEmit;
  static void cb_t2TurretEmitBtn(Fl_Widget* o, void* v);

  Fl_Light_Button *m_t2GunEmitBtn;
  static bool m_bt2GunEmit;
  static void cb_t2GunEmitBtn(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_ppfSlider;
  static int m_nPartPerFrame;
  static void cb_ppfSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_lifeSlider;
  static int m_nLifespan;
  static void cb_lifeSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_maxPartSlider;
  static int m_nMaxParticles;
  static void cb_maxPartSlider(Fl_Widget* o, void* v);

  Fl_Light_Button *m_collisionBtn;
  static bool m_bCollisions;
  static void cb_collisionBtn(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_penaltyStiffSlider;
  static double m_nPenaltyStiffness;
  static void cb_penStiffSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_tank1VelSlider;
  static double m_nMaxTank1Vel;
  static void cb_tank1VelSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_tank2VelSlider;
  static double m_nMaxTank2Vel;
  static void cb_tank2VelSlider(Fl_Widget* o, void* v);


  Fl_Light_Button *m_springBtn;
  static bool m_bSprings;
  static void cb_springBtn(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_springStiffSlider;
  static double m_nSpringStiffness;
  static void cb_springStiffSlider(Fl_Widget* o, void* v);

  Fl_Value_Slider* m_springRestLenSlider;
  static double m_nSpringRestLen;
  static void cb_springRestLenSlider(Fl_Widget* o, void* v);
};
#endif
